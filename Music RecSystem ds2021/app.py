import dash
import dash_core_components as dcc
import dash_html_components as html
import pandas as pd
import dash_table
from dash.dependencies import Output, Input
import random

table_greeting = ['–°–º–æ—Ç—Ä–∏ —á—Ç–æ –º—ã —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞–ª–∏!', '–ê –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–≤–æ–π –≤–∫—É—Å!', '–ë–æ–º–±–∏—á–µ—Å–∫–∏–µ –ø–µ—Å–Ω–∏ —Å—Ç—Ä–æ–∫–æ–π –Ω–∏–∂–µ ;)',
                  '–≠—Ç–æ —Ç–æ—á–Ω–æ –ø–æ–¥–Ω–∏–º–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µüòâ', '–õ—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ —Ç–æ–ª—å–∫–æ —É –Ω–∞—Åü§©', '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä))0)',
                  "–ú–Ω–µ —Ç–æ–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è‚ù§"]

data = pd.read_csv("data/tracks3.csv").sample(30000).reset_index(drop=True)
data['artists'] = data['artists'].map(lambda x: ', '.join(x[1:-1].replace("'", '').split(',')))
# all_artists = pd.read_csv("data/artists.csv")['0']
# song_names = pd.read_csv("data/song_names.csv")['name']

try:
    data['release_date'] = data['release_date'].map(lambda x: int(x[:4]))
    data.dropna(inplace=True)
except:
    pass


# ________________________________-functions-________________________________
# get list of artists
def get_all_artists(artist_col):
    all_artists = []
    for artist_block in artist_col:
        artists = artist_block.split(',')
        for artist in artists:
            if artist not in all_artists:
                all_artists.append(artist)
    return all_artists


# generate html table
def generate_table(dataframe, max_rows=10):
    return html.Table(
        # Header
        [html.Tr([html.Th(col) for col in dataframe.columns])] +

        # Body
        [html.Tr([
            html.Td(dataframe.iloc[i][col]) for col in dataframe.columns
        ]) for i in range(min(len(dataframe), max_rows))]
    )


# transform table into readable view
def show_final_df(df):
    df = df.loc[:, ['name', 'popularity', 'artists', 'release_date']]
    df.rename(columns={'name': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏', 'popularity': '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å', 'artists': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
                       'release_date': '–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞'}, inplace=True)
    # df['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'] = df['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'].map(lambda x: ', '.join(x[1:-1].replace("'", '').split(',')))
    return df


# ________________________________ # ________________________________
# ccs styles
external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css',
                        {
                            "href": "https://fonts.googleapis.com/css2?"
                                    "family=Lato:wght@400;700&display=swap",
                            "rel": "stylesheet",
                        },
                        ]
# initialization
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
app.title = "Music filters for everyone"

# ________________________________ # ________________________________
app.layout = html.Div(
    children=[
        html.Div(
            children=[
                html.P(children="üéµ", className="header-emoji"),
                html.H1(
                    children="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã", className="header-title"
                ),
                html.P(
                    children="–° –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–¥–±–æ—Ä–∫—É –ø–æ–¥ –ª—é–±—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"
                             " –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä—ã, –≤—ã–±—Ä–∞—Ç—å –≥–æ–¥ —Ä–µ–ª–∏–∑–∞, —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ—Å—Ç—å, "
                             "–∞–∫—É—Å—Ç–∏—á–Ω–æ—Å—Ç—å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ! –û—Ç –≤–∞—Å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏—à—å –ø–∞—Ä–∞ –º–∏–Ω—É—Ç –∏ –ø–æ–¥–±–æ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞!",
                    className="header-description",
                ),
            ],
            className="header", ),

        # ________________________________Menu Block 1______________________________________
        html.Div(
            children=[
                html.Div(
                    children=[
                        html.Div(children="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", className="menu-title"),
                        dcc.Dropdown(
                            id="artist-filter",
                            options=[
                                # {"label": artist0, "value": artist0}
                                # for artist0 in list(all_artists)
                                {"label": artist, "value": artist}
                                for artist in get_all_artists(data['artists'].unique())
                            ],
                            value="–í—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏",
                            clearable=False,
                            className="dropdown",
                            multi=True,
                            placeholder="–í—ã–±–µ—Ä–∏ –ª—é–±–∏–º–æ–≥–æ –∏—Å–ø–æ–ª—å–Ω–∏—Ç–µ–ª—è"
                        ),
                    ]
                ), ],
            className="menu", ),

        # ________________________________-Sliders-________________________________
        html.Div(
            children=[
                # 1
                html.Div(
                    children="–ì–æ–¥ —Ä–µ–ª–∏–∑–∞",
                    className="menu-title"),

                dcc.RangeSlider(
                    id='year-slider',
                    min=1900,
                    max=2021,
                    step=1,
                    value=[1900, 2021],
                    marks={'1900': '1900', '2021': '2021'}
                ),
                html.Div(id='output-year-slider', className='output-style'),
                # 2
                html.Div(
                    children="–£—Ä–æ–≤–µ–Ω—å —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ—Å—Ç–∏",
                    className="menu-title"),

                dcc.RangeSlider(
                    id='danceability-slider',
                    min=0,
                    max=1,
                    step=0.01,
                    value=[0, 1],
                    marks={'0': '0%', '1': '100%'}
                ),
                html.Div(id='output-danceability-slider', className='output-style'),
                # 3
                html.Div(
                    children="–≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å",
                    className="menu-title"),

                dcc.RangeSlider(
                    id='energy-slider',
                    min=0,
                    max=1,
                    step=0.01,
                    value=[0, 1],
                    marks={'0': '0%', '1': '100%'}
                ),
                html.Div(id='output-energy-slider', className='output-style'),

            ],
            className="sliders"),

        html.Div(
            children=[
                # 1
                html.Div(
                    children="–ñ–∏–≤–æ—Å—Ç—å",
                    className="menu-title"),

                dcc.RangeSlider(
                    id='liveness-slider',
                    min=0,
                    max=1,
                    step=0.01,
                    value=[0, 1],
                    marks={'0': '0%', '1': '100%'}
                ),
                html.Div(id='output-liveness-slider', className='output-style'),
                # 2
                html.Div(
                    children="–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞–º–∏",
                    className="menu-title"),

                dcc.RangeSlider(
                    id='speechiness-slider',
                    min=0,
                    max=1,
                    step=0.01,
                    value=[0, 1],
                    marks={'0': '0%', '1': '100%'}
                ),
                html.Div(id='output-speechiness-slider', className='output-style'),
                # 3
                html.Div(
                    children="–ê–∫—É—Å—Ç–∏—á–Ω–æ—Å—Ç—å",
                    className="menu-title"),

                dcc.RangeSlider(
                    id='acousticness-slider',
                    min=0,
                    max=1,
                    step=0.01,
                    value=[0, 1],
                    marks={'0': '0%', '1': '100%'}
                ),
                html.Div(id='output-acousticness-slider', className='output-style'),

            ],
            className="sliders"),

        # ________________________________-Table with results-________________________________
        html.Div(children=[
            html.H5(children=random.choice(table_greeting)),
            dcc.Interval(id='main-table-interval', interval=1000),
            dash_table.DataTable(
                id='main-table',
                data=[],
                editable=False,
                style_cell_conditional=[
                    {'if': {'column_id': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏'}, 'width': '40%'},
                    {'if': {'column_id': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}, 'width': '40%'},
                    {'if': {'column_id': '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å'}, 'width': '10%'},
                    {'if': {'column_id': '–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞'}, 'width': '10%'},
                ],
                style_header={'backgroundColor': 'rgb(230, 230, 230)',
                              'fontWeight': 'bold'},
                style_data_conditional=[
                    {'if': {'row_index': 'odd'},
                     'backgroundColor': 'rgb(248, 248, 248)'}
                ],
                style_table={'table-layout': 'fixed'},
                style_cell={
                    'overflow': 'hidden',
                    'textOverflow': 'ellipsis',
                    'maxWidth': 0
                }
            )
        ], className="table-top"),

        # ________________________________-Menu Block 2-________________________________
        html.Div(
            children=[
                html.Div(
                    children=[
                        html.Div(children="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏", className="menu-title"),
                        dcc.Dropdown(
                            id="song-name-filter",
                            options=[
                                {"label": song_name, "value": song_name}
                                for song_name in data.name.unique()
                            ],
                            value="–í—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏",
                            clearable=False,
                            className="dropdown",
                        ),
                    ]
                ), ],
            className="menu", ),
        # ________________________________-Table 2 with results-________________________________
        html.Div(children=[
            html.H5(children=random.choice(table_greeting)),
            dcc.Interval(id='rec-system-interval', interval=1000),
            dash_table.DataTable(
                id='rec-system-table',
                data=[],
                editable=False,
                style_cell_conditional=[
                    {'if': {'column_id': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏'}, 'width': '40%'},
                    {'if': {'column_id': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}, 'width': '40%'},
                    {'if': {'column_id': '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å'}, 'width': '10%'},
                    {'if': {'column_id': '–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞'}, 'width': '10%'},
                ],
                style_header={'backgroundColor': 'rgb(230, 230, 230)',
                              'fontWeight': 'bold'},
                style_data_conditional=[
                    {'if': {'row_index': 'odd'},
                     'backgroundColor': 'rgb(248, 248, 248)'}
                ],
                style_table={'table-layout': 'fixed'},
                style_cell={
                    'overflow': 'hidden',
                    'textOverflow': 'ellipsis',
                    'maxWidth': 0
                }
            )
        ], className="table-top"),

    ]
)


# ________________________________-Updater-________________________________
@app.callback(
    [Output('output-year-slider', 'children'),
     Output('output-danceability-slider', 'children'),
     Output('output-energy-slider', 'children'),
     Output('output-liveness-slider', 'children'),
     Output('output-speechiness-slider', 'children'),
     Output('output-acousticness-slider', 'children'), ],

    [Input('year-slider', 'value'),
     Input('danceability-slider', 'value'),
     Input('energy-slider', 'value'),
     Input('liveness-slider', 'value'),
     Input('speechiness-slider', 'value'),
     Input('acousticness-slider', 'value')]
)
def update_output(value_year, value_dance, value_energy, value_loud, value_speech, value_acous):
    return f'–ü–µ—Å–Ω–∏ —Å {value_year[0]} –ø–æ {value_year[1]} —É–∂–µ –∂–¥—É—Ç —Ç–µ–±—è –Ω–∏–∂–µ!', \
           f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å {value_dance[0] * 100:0.0f}% –ø–æ {value_dance[1] * 100:0.0f}%', \
           f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å {value_energy[0] * 100:0.0f}% –ø–æ {value_energy[1] * 100:0.0f}%', \
           f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å {value_loud[0] * 100:0.0f}% –ø–æ {value_loud[1] * 100:0.0f}%', \
           f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å {value_speech[0] * 100:0.0f}% –ø–æ {value_speech[1] * 100:0.0f}%', \
           f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å {value_acous[0] * 100:0.0f}% –ø–æ {value_acous[1] * 100:0.0f}%',


# __________________-Main-__________________
@app.callback(
    [Output('main-table', 'data'), Output('main-table', 'columns')],
    [
        Input("artist-filter", 'value'),
        Input('year-slider', 'value'),
        Input('danceability-slider', 'value'),
        Input('energy-slider', 'value'),
        Input('liveness-slider', 'value'),
        Input('speechiness-slider', 'value'),
        Input('acousticness-slider', 'value')
    ]
)
def update_output(artists, year, danceability, energy, liveness, speechiness, acousticness):
    if len(artists) > 0:
        filtered_data = pd.DataFrame()
        for artist in artists:
            mask = (data.artists.str.contains(artist))
            filtered_data = filtered_data.append(data.loc[mask, :])
    else:
        filtered_data = data.copy()

    mask = (
            (filtered_data.release_date >= year[0]) & (filtered_data.release_date <= year[1])
            & (filtered_data.danceability >= danceability[0]) & (filtered_data.danceability <= danceability[1])
            & (filtered_data.energy >= energy[0]) & (filtered_data.energy <= energy[1])
            & (filtered_data.liveness >= liveness[0]) & (filtered_data.liveness <= liveness[1])
            & (filtered_data.speechiness >= speechiness[0]) & (filtered_data.speechiness <= speechiness[1])
            & (filtered_data.acousticness >= acousticness[0]) & (filtered_data.acousticness <= acousticness[1])
    )
    filtered_data = filtered_data.loc[mask, :]
    filtered_data = show_final_df(filtered_data)
    if len(filtered_data) == 0:
        filtered_data.loc[1] = ['–Ø –Ω–µ —Å–º–æ–≥((', "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å", "–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–æ—Ö–æ–¥—è—â–µ–π –ø–µ—Å–Ω–∏;(",
                                "–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"]
    else:
        if len(filtered_data) > 10:
            filtered_data = filtered_data.sample(10)
    return filtered_data.to_dict('records'), [{"name": i, "id": i} for i in filtered_data.columns]


# Table 2
@app.callback(
    [Output('rec-system-table', 'data'), Output('rec-system-table', 'columns')],
    [Input("song-name-filter", 'value'), ]
)
def update_output(song_name):
    mask = (data.name == song_name)
    filtered_data = data.loc[mask, :]
    if len(filtered_data) > 10:
        filtered_data = filtered_data.sample(10)

    filtered_data = show_final_df(filtered_data)
    return filtered_data.to_dict('records'), [{"name": i, "id": i} for i in filtered_data.columns]


# ________________________________-start-________________________________
# this is needed for the procfile to deploy to heroku
server = app.server

if __name__ == "__main__":
    app.run_server(debug=True,
                   host='127.0.0.1')
